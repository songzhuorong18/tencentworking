<<<<<<< HEAD
This is a new branch!
=======
# 本地开发环境搭建

## brew（https://brew.sh/）
Homebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。

## iterm2（https://www.iterm2.com/）+ oh my zsh（https://ohmyz.sh/）
终端软件

## node
```
brew install node
```

## whistle
抓包、代理
```
npm i whistle -g
```

## corkscrew
ssh代理，公司officewifi禁止了22、443等敏感端口，需要进行代理转发
```
brew install corkscrew

#git-flow使用指南

## 分支目录
### 线上分支
- `master` 正式环境（对应线上正式版本，@digitalgd/gdui）
- `develop` 开发环境（对应线上测试版本，@digitalgd/gdui-test）

### 本地分支
- `hotfix` 紧急修复正式环境
- `feature` 新功能开发
- `release` 新版本发布

### 本地分支命名规范：（后面xxx推荐使用001这类标识）
`hotfix`：hotfix-#xxx
`feature`：feature-#xxx
`release`：release-#xxx

## 分支定义
### matser（正式版本）
只负责线上部署，只接受`hotfix`、`release`的分支`merge requests`(合并请求)，不允许把`develop`、`feature`分支直接合并

### develop（开发）
开发的主分支，每个开发人员应该在其分支下`checkout`一个新的本地`feature`分支进行开发，完成后推送回`develop`分支，并删除本地分支

### hotfix（热修复）
只负责线上环境的bug修复，只与`master`分支有关联，不允许其它分支直接合并，请使用`merge requests`与`master`合并

### release（预发布）
通过`checkout develop`生成一个新的本地分支`release`，并推送到仓库，然后发起向`master`的`merge requests`(合并请求)

### feature（功能开发）
每次开发新功能前，通过`checkout develop`生成一个新的`feature`本地分支进行开发，完成后合并到`develop`分支并推送到仓库，最后删除本地的`feature`分支。

## 案例参考

### 紧急修复线上bug
```bash
git pull
git checkout -b hotfix-#001 master
# fix some bug
# ...这里省略正常的add、commit流程
git push -u origin hotfix-#001
# 登录git的Merge Requests页面提交合并请求
# 选择的reviewer通过后，页面上点击合并
# 通过后把hotfix合并到develop
git checkout develop
git merge hotfix-#001
git push origin develop
git branch -d hotfix-#001
# 确认无误后在Merge Requests中删除对应的source branch
```

### 开发功能
```bash
git pull
git checkout -b feature-#001 develop
# 开发功能...
git checkout develop
git merge feature-#001
git push origin develop
git branch -d feature-#001
```

### 发布新版本
```bash
# 合并到预发布分支
git pull
git checkout -b release-#001 develop
git push -u origin release-#001
# 登录git的Merge Requests页面提交合并请求
# 选择的reviewer通过后，页面上点击合并
# 确认无误后在Merge Requests中删除对应的source branch
```

### 一些可能会用到的指令
#### 更新线上分支列表
```
git remote update origin --prune
```
>>>>>>> 47e668061cfb9a58ac2f9e193644c647a54bd70d
